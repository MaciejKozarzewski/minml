cmake_minimum_required(VERSION 3.18)
project(MinML VERSION 1.0.0 DESCRIPTION "Minimalistic ML library" LANGUAGES CXX)

option(BUILD_TESTING "Build unit tests?" ON)
option(BUILD_WITH_CUDA "Build with CUDA support" OFF)
option(BUILD_WITH_CUDNN "Build with CUDNN support" OFF)
set(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "Choose debug postfix" FORCE)
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose build type" FORCE)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if(BUILD_WITH_CUDA)
	set(LibName MinML)
	set(LauncherName MinML_launcher)
	set(TestName MinML_test)
else()
	set(LibName MinML_cpu)
	set(LauncherName MinML_launcher_cpu)
	set(TestName MinML_test_cpu)
endif()

add_library(${LibName} STATIC)
add_subdirectory("src/backend/cpu")
add_subdirectory("src/core")
add_subdirectory("src/graph")
add_subdirectory("src/layers")
add_subdirectory("src/training")
add_subdirectory("src/utils")

set_target_properties(${LibName} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_include_directories(${LibName} PUBLIC "${PROJECT_SOURCE_DIR}/include")

find_package(ZLIB REQUIRED)
if (WIN32)
	target_link_libraries(${LibName} PUBLIC "C:/mingw64/lib/libz.a")
else()
	target_link_libraries(${LibName} PUBLIC z)
endif()

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
	target_link_libraries(${LibName} PUBLIC OpenMP::OpenMP_CXX)
else()
	message(FATAL_ERROR "no OpenMP")
endif()

if (WIN32)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mxsave")
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_WITH_CUDA)
	add_subdirectory("src/backend/cuda")
	target_compile_definitions(${LibName} PRIVATE USE_CUDA)
#	if (WIN32)
#		target_compile_definitions(${LibName} PRIVATE BUILDING_DLL)
#	endif()
else()
	target_sources(${LibName} PRIVATE "src/backend/cuda_dummy_backend.cpp")
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
	enable_testing()
	include(GoogleTest)
	add_subdirectory("test")
	target_link_libraries(${LibName} PUBLIC pthread)
endif()

add_executable(${LauncherName} "launcher/minml.cpp")
set_target_properties(${LauncherName} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_link_libraries(${LauncherName} PUBLIC ${LibName})
if (WIN32 AND BUILD_WITH_CUDA)
	target_link_libraries(${LauncherName} PUBLIC "${CMAKE_BINARY_DIR}/bin/cudaml.dll")
endif()
