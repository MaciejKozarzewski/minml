cmake_minimum_required(VERSION 3.18)
project(MinML VERSION 1.0.0 DESCRIPTION "Minimalistic ML library" LANGUAGES CXX)

option(BUILD_TESTING "Build unit tests?" ON)
option(BUILD_WITH_OPENBLAS "Use OpenBlas for linear algebra on CPU?" ON)
option(DYNAMIC_ARCH "Use runtime dispatching of simd code" ON)
option(BUILD_WITH_CUDA "Build with CUDA support" ON)
set(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "Choose debug postfix" FORCE)
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose build type" FORCE)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

add_library(MinML STATIC)
add_subdirectory("src/backend/cpu")
add_subdirectory("src/core")
add_subdirectory("src/graph")
add_subdirectory("src/layers")
add_subdirectory("src/training")
add_subdirectory("src/utils")

set_target_properties(MinML PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_include_directories(MinML PUBLIC "${PROJECT_SOURCE_DIR}/include")
target_link_libraries(MinML PUBLIC z)

find_package(ZLIB REQUIRED)
find_package(OpenMP)
if(OpenMP_CXX_FOUND)
	target_link_libraries(MinML PUBLIC OpenMP::OpenMP_CXX)
else()
	message(FATAL_ERROR "no OpenMP")
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_WITH_OPENBLAS)
	target_compile_definitions(MinML PRIVATE USE_OPENBLAS=1)
	target_link_libraries(MinML PUBLIC openblas)
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_WITH_CUDA)
	add_subdirectory("src/backend/cuda")
	target_compile_definitions(MinML PRIVATE USE_CUDA)
	target_include_directories(MinML PUBLIC "/usr/local/cuda/include")
	target_link_directories(MinML PUBLIC "/usr/local/cuda/lib64")
	target_link_libraries(MinML PUBLIC cudart cublas)
else()
	target_sources(MinML PRIVATE "src/backend/cuda_dummy_backend.cpp")
endif()

if (WIN32)
	target_compile_definitions(MinML PRIVATE BUILDING_DLL)
	target_compile_definitions(${CUDA_BACKEND_NAME} PRIVATE BUILDING_DLL)
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
	enable_testing()
	include(GoogleTest)
	add_subdirectory("test")
endif()

add_executable(MinML_launcher "launcher/minml.cpp")
target_link_libraries(MinML_launcher PUBLIC MinML)
